using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SKGL;

namespace Keygen
{
    class Program
    {
        [STAThread]
        static void Main(string[] args) {
            Start:
            //int length = 32;

            //const string valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
            //StringBuilder res = new StringBuilder();
            //using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider()) {
            //    byte[] uintBuffer = new byte[sizeof(uint)];

            //    while (length-- > 0) {
            //        rng.GetBytes(uintBuffer);
            //        uint num = BitConverter.ToUInt32(uintBuffer, 0);
            //        res.Append(valid[(int)(num % (uint)valid.Length)]);
            //    }
            //}

            //byte[] byt = System.Text.Encoding.UTF8.GetBytes(res.ToString());
            //var key = Convert.ToBase64String(byt);

            string key = GenKey("H3rebEDr4Gons8==D~~");

            Console.WriteLine(key);
            Clipboard.SetText(key);
            Console.WriteLine("Key generated, and copied to clipboard.");
            Console.WriteLine("please press Enter to continue");
            Console.ReadLine();
            Console.Clear();
            Console.WriteLine("Please select an option below");
            Console.WriteLine("#########################");
            Console.WriteLine("## 1. Generate new key.##");
            Console.WriteLine("## 2. validate Key     ##");
            Console.WriteLine("## 3. Exit             ##");
            Console.WriteLine("#########################");
            switch (Console.ReadLine()) {

                case "1":
                    Console.Clear();
                    goto Start;
                    break;

                case "2":
                    Console.Clear();
                    goto Validate;
                    break;

                case "3":
                    goto exit;
                    break;
            }

            Validate:
            Console.WriteLine("Please enter the key you would like to validate");
            string keyToValidate = Console.ReadLine();
            if(ValidateKey(keyToValidate, "H3rebEDr4Gons8==D~~")) {
                Console.WriteLine(string.Format("key {0} is valid.",keyToValidate));
            } else {
                Console.WriteLine("key " + keyToValidate + " is invalid.");
            }
            Console.WriteLine("Please press Enter to continue");
            Console.ReadLine();
            goto Start;

            exit:
            Console.WriteLine("");

        }

        private static string GenKey(string passphrase) {

            SKGL.Generate skglg = new SKGL.Generate();
            skglg.secretPhase = passphrase;
            string key = skglg.doKey(999);
            
            return key;
        }

        private static bool ValidateKey(string key, string passphrase) {
            SKGL.Validate skglv = new SKGL.Validate();
            skglv.Key = key;
            skglv.secretPhase = passphrase;
            return skglv.IsValid;

        }

       

    }
}
