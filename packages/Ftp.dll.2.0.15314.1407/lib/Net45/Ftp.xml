<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ftp</name>
    </assembly>
    <members>
        <member name="T:Limilabs.FTP.BasicConstant">
            <summary>
            Base class for all constant values.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.Equals(Limilabs.FTP.BasicConstant)">
            <summary>
             Determines whether the specified <see cref="T:Limilabs.FTP.BasicConstant"/> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
             <param name="other">The <see cref="T:Limilabs.FTP.BasicConstant"/> to compare with the current <see cref="T:Limilabs.FTP.BasicConstant"/></param>
             <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Limilabs.FTP.BasicConstant"/>.</returns>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.op_Equality(Limilabs.FTP.BasicConstant,Limilabs.FTP.BasicConstant)">
            <summary>
            Checks is two <see cref="T:Limilabs.FTP.BasicConstant"/> objects are same.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>True</c> if flags are equal <c>false</c> otherwise</returns>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.op_Inequality(Limilabs.FTP.BasicConstant,Limilabs.FTP.BasicConstant)">
            <summary>
            Checks is two <see cref="T:Limilabs.FTP.BasicConstant"/> objects are different.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>False</c> if flags are equal <c>true</c> otherwise</returns>
        </member>
        <member name="M:Limilabs.FTP.BasicConstant.ToString">
            <summary>
            Returns the <see cref="P:Limilabs.FTP.BasicConstant.Name"/> of this object.
            </summary>
            <returns><see cref="P:Limilabs.FTP.BasicConstant.Name"/> of this object.</returns>
        </member>
        <member name="P:Limilabs.FTP.BasicConstant.Name">
            <summary>
            Gets the name of the constant.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.AuthExtension">
            <summary>
            Represets AUTH extension (AUTH SSL, AUTH TLS).
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpExtension">
            <summary>
            Represents single FTP extension.
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/>
            <seealso cref="T:Limilabs.FTP.Client.ExtensionContainer"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.Rest">
            <summary>
            Represents REST extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/> property.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.MLST">
            <summary>
            Represents MLST extension.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.MFMT">
            <summary>
            Represents 'Modify Fact: Modification Time' (MFMT) extension (<a href="http://www.limilabs.com/ftp/rfc/draft-somers-ftp-mfxx-04">draft-somers-ftp-mfxx-04</a>).
            <seealso cref="M:Limilabs.FTP.Client.Ftp.SetFileModificationTime(System.String,System.DateTime)"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.MDTM">
            <summary>
            Represents 'File Modification Time' (MDTM) extension (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>).
            <seealso cref="M:Limilabs.FTP.Client.Ftp.SetFileModificationTime(System.String,System.DateTime)"/>
            <seealso cref="M:Limilabs.FTP.Client.Ftp.GetFileModificationTime(System.String)"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.UTF8">
            <summary>
            Represents UTF8 extension.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.Size">
            <summary>
            Represents SIZE extension. 
            <seealso cref="M:Limilabs.FTP.Client.Ftp.GetFileSize(System.String)"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.Clnt">
            <summary>
            Represents CLNT extension.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.Mode">
            <summary>
            Represents MODE extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsModeZ"/> property.
            <seealso cref="M:Limilabs.FTP.Client.Ftp.SetTransferMode(Limilabs.FTP.Client.FtpTransferMode)"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.Auth">
            <summary>
            Represents AUTH extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsAuthSSL"/> and <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsAuthTLS"/>  property.
            <seealso cref="M:Limilabs.FTP.Client.Ftp.AuthTLS"/>
            <seealso cref="M:Limilabs.FTP.Client.Ftp.AuthSSL"/>
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.XCRC">
            <summary>
            Represents XCRC extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/> property.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.XMD5">
            <summary>
            Represents XMD5 extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/> property.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.XSHA1">
            <summary>
            Represents XSHA1 extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/> property.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.XSHA256">
            <summary>
            Represents XSHA256 extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/> property.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpExtension.XSHA512">
            <summary>
            Represents XSHA1 extension. Consider using <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/> property.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.AuthExtension.Method">
            <summary>
            Gets AUTH method.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.AuthMethod">
            <summary>
            Represents AUTH method (<see cref="F:Limilabs.FTP.Client.AuthMethod.SSL"/>, <see cref="F:Limilabs.FTP.Client.AuthMethod.TLS"/>).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.AuthMethod.SSL">
            <summary>
            Represents AUTH SSL method.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.AuthMethod.TLS">
            <summary>
            Represents AUTH TLS method.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpPermission">
            <summary>
            Represents FTP permissions returned using perm fact in response to MLSD command (<see cref="M:Limilabs.FTP.Client.Ftp.MLSD"/> method or <see cref="M:Limilabs.FTP.Client.Ftp.GetList"/> when <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/> is supported)  
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Append">
            <summary>
            The "a" permission applies to objects of type=file, and indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.Append(System.String,System.Byte[])"/> command may be applied to the file named.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.CreateFile">
            <summary>
            The "c" permission applies to objects of type=dir (and type=pdir, type=cdir).  
            It indicates that files may be created in the directory named.  
            That is, that a <see cref="M:Limilabs.FTP.Client.Ftp.UploadUnique(System.Byte[])"/> and <see cref="M:Limilabs.FTP.Client.Ftp.UploadUnique(System.IO.Stream)"/> commands are likely to succeed, 
            and that <see cref="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.Byte[])"/> and <see cref="M:Limilabs.FTP.Client.Ftp.Append(System.String,System.Byte[])"/> commands might succeed if the file named did not previously exist, 
            but is to be created in the directory object that has the "c" permission.  
            It also indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.Rename(System.String,System.String)"/> command is likely to succeed for names in the directory.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Delete">
            <summary>
            The "d" permission applies to all types.  
            It indicates that the object named may be deleted, that is, 
            that the <see cref="M:Limilabs.FTP.Client.Ftp.DeleteFolder(System.String)"/> command may be applied to it if it is a directory, 
            and otherwise that the <see cref="M:Limilabs.FTP.Client.Ftp.DeleteFile(System.String)"/> command may be applied to it.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.ChangeFolder">
            <summary>
            The "e" permission applies to the directory types. 
            When set on an object of type=dir, type=cdir, or type=pdir it indicates that a <see cref="M:Limilabs.FTP.Client.Ftp.ChangeFolder(System.String)"/>
            command naming the object should succeed, and the user should be able to enter the directory named.  
            For type=pdir it also indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.ChangeFolderUp"/> command may succeed 
            (if this particular pathname is the one to which a <see cref="M:Limilabs.FTP.Client.Ftp.ChangeFolderUp"/> would apply.)
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Rename">
            <summary>
            The "f" permission for objects indicates that the object named may be
            renamed - that is, may be the object of an <see cref="M:Limilabs.FTP.Client.Ftp.Rename(System.String,System.String)"/> command.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.List">
            <summary>
            The "l" permission applies to the directory file types, and indicates
            that the listing commands, <see cref="M:Limilabs.FTP.Client.Ftp.List"/>, NLST, and <see cref="M:Limilabs.FTP.Client.Ftp.GetList"/> may be applied to the directory in question.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.CreateFolder">
            <summary>
            The "m" permission applies to directory types. 
            It indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.CreateFolder(System.String)"/> command may be used to create a new directory within the directory under consideration.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Purge">
            <summary>
            The "p" permission applies to directory types. 
            It indicates that objects in the directory may be deleted, 
            or (stretching naming a little) that the directory may be purged.  
            Note: it does not indicate that the RMD command may be used to remove the directory named itself, the "d" permission indicator indicates that.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Read">
            <summary>
            The "r" permission applies to type=file objects, and for some systems, perhaps to other types of objects. 
            It indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.Download(System.String)"/> command may be applied to that object.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpPermission.Write">
            <summary>
            The "w" permission applies to type=file objects, and for some systems, perhaps to other types of objects. 
            It indicates that the <see cref="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.Byte[])"/> command may be applied to the object named.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpResponseException">
            <summary>
            Represents FTP server error response.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpException">
            <summary>
            Represents an error that occurred during FTP conversation.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.FtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of FtpException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.FtpResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of ImapResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponseException.Response">
            <summary>
            Gets FTP server response that caused this exception to be thrown.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.MLSFtpItemType.Folder">
            <summary>
            Folder.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.MLSFtpItemType.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.MLSFtpItemType.CurrentFolder">
            <summary>
            Current folder.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.MLSFtpItemType.ParentFolder">
            <summary>
            Parent folder.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.LocalSearchOptions">
            <summary>
            Represents options for local search.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.#ctor">
            <summary>
            Creates new LocalSearchOptions using default values.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new LocalSearchOptions using specified values.
            </summary>
            <param name="filePattern">The search string to match against the names of files in path.</param>
            <param name="recursive">Specifies if search should include sub folders.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.UseRegexMatch(System.String)">
            <summary>
            Specifies regex search pattern (e.g. @"^.*\.txt$").
            </summary>
            <param name="filePattern">Regex file pattern.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.UseRegexMatch(System.String,System.String,System.Boolean)">
            <summary>
            Specifies regex search patterns (e.g. @"^.*\.txt$").
            </summary>
            <param name="folderPattern">Regex folder pattern.</param>
            <param name="filePattern">Regex file pattern.</param>
            <param name="ignoreCase">True if case should be ignored, false otherwise.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.UseWildcardMatch(System.String)">
            <summary>
            Specifies wildcard search pattern (e.g. @"*.txt").
            </summary>
            <param name="filePattern">Regex file pattern.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.LocalSearchOptions.UseWildcardMatch(System.String,System.String,System.Boolean)">
            <summary>
            Specifies wildcard search patterns (e.g. @"*.txt").
            </summary>
            <param name="folderPattern">Regex folder pattern.</param>
            <param name="filePattern">Regex file pattern.</param>
            <param name="ignoreCase">True if case should be ignored, false otherwise.</param>
        </member>
        <member name="P:Limilabs.FTP.Client.LocalSearchOptions.FolderPattern">
            <summary>
            The search string to match against the names of folder in path. Default is "*".
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.LocalSearchOptions.FilePattern">
            <summary>
            The search string to match against the names of files in path. Default is "*".
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.LocalSearchOptions.IgnoreCase">
            <summary>
            Specifies if <see cref="P:Limilabs.FTP.Client.LocalSearchOptions.FilePattern"/> and <see cref="P:Limilabs.FTP.Client.LocalSearchOptions.FolderPattern"/> is case sensitive or not.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.LocalSearchOptions.UseRegex">
            <summary>
            Specifies if <see cref="P:Limilabs.FTP.Client.LocalSearchOptions.FilePattern"/> and <see cref="P:Limilabs.FTP.Client.LocalSearchOptions.FolderPattern"/> use regex matching (e.g. @"^.*\.txt$) or file matching (e.g. "*.txt").
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.LocalSearchOptions.Recursive">
            <summary>
            Specifies if search should include sub folders. Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.MLSTExtension">
            <summary>
            Representes MLST extension.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.MLSTExtension.Parameters">
            <summary>
            Gets MLST extension parameters.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ModeExtension">
            <summary>
            Represents MODE extension.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ModeExtension.Methods">
            <summary>
            Gets MODE methods. At least <see cref="F:Limilabs.FTP.Client.ModeMethod.ZLib"/> should be supported.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ModeMethod">
            <summary>
            Represent <see cref="T:Limilabs.FTP.Client.ModeExtension"/> methods.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.ModeMethod.ZLib">
            <summary>
            Represents MODE Z (ZLIB) mode method.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.UnixPermission">
            <summary>
            Represents single permission entry.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.UnixPermission.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.UnixPermission.Execute">
            <summary>
            Permission to execute/run.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.UnixPermission.Write">
            <summary>
            Permission to write.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.UnixPermission.Read">
            <summary>
            Permission to read.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.UnixPermissionSet">
            <summary>
            Represents Unix permissions.
            </summary>
            <seealso cref="M:Limilabs.FTP.Client.Ftp.List"/>
            <seealso cref="P:Limilabs.FTP.Client.FtpItem.UnixPermissions"/>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.#ctor">
            <summary>
            Creates new, empty UnixPermissions object.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.#ctor(Limilabs.FTP.Client.UnixPermission)">
            <summary>
            Creates new UnixPermissions object with <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerUser"/>, <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerGroup"/> and <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.Others"/> properties set to specified value.
            </summary>
            <param name="forAll">Permissions to be set for <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerUser"/>, <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerGroup"/> and <see cref="P:Limilabs.FTP.Client.UnixPermissionSet.Others"/></param>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.ToNumber">
            <summary>
            Returns a number that represents this permission in CHMOD style (755, 666, 777, 0)
            </summary>
            <returns>Number that represents this premissions.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.ToNumberAsText">
            <summary>
            Returns a number as string that represents this permission in CHMOD command style ("755", "666", "777", "000")
            </summary>
            <returns>Number that represents this premissions.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.ToText">
            <summary>
            Returns a string that represents this permission in ls command style ("rw-r--r--", "rw-rw-rw-", "rwxrwxrwx", "000")
            </summary>
            <returns>String that represents this premissions.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.ParseText(System.String)">
            <summary>
            Parses ls command style text ("rw-r--r--", "rw-rw-rw-", "rwxrwxrwx", "000").
            </summary>
            <param name="text">Text to parse.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.Equals(Limilabs.FTP.Client.UnixPermissionSet)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.op_Equality(Limilabs.FTP.Client.UnixPermissionSet,Limilabs.FTP.Client.UnixPermissionSet)">
            <summary>
            Checks is two <see cref="T:Limilabs.FTP.Client.UnixPermissionSet"/> objects are same.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>True</c> if permissions are equal <c>false</c> otherwise</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.UnixPermissionSet.op_Inequality(Limilabs.FTP.Client.UnixPermissionSet,Limilabs.FTP.Client.UnixPermissionSet)">
            <summary>
            Checks is two <see cref="T:Limilabs.FTP.Client.UnixPermissionSet"/> objects are different.
            </summary>
            <param name="left">First object to compare</param>
            <param name="right">Second object to compare</param>
            <returns><c>False</c> if permissions are equal <c>true</c> otherwise</returns>
        </member>
        <member name="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerUser">
            <summary>
            Gets or sets permissions for owning user.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.UnixPermissionSet.OwnerGroup">
            <summary>
            Gets or sets permissions for owning group.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.UnixPermissionSet.Others">
            <summary>
            Gets or sets permissions for other users/groups.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.RestExtension">
            <summary>
            Represents REST extension.
            </summary>
            <seeals cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/>
        </member>
        <member name="P:Limilabs.FTP.Client.RestExtension.Methods">
            <summary>
            Gets REST methods. At least <see cref="F:Limilabs.FTP.Client.RestMethod.Stream"/> should be supported.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.RestMethod">
            <summary>
            Represent <see cref="T:Limilabs.FTP.Client.RestExtension"/> methods.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.RestMethod.Stream">
            <summary>
            Represents REST STREAM rest method.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.RemoteSearchItem">
            <summary>
            Represents remote server search result item (file or folder), returned by <see cref="M:Limilabs.FTP.Client.Ftp.Search(Limilabs.FTP.Client.RemoteSearchOptions)"/> or  <see cref="M:Limilabs.FTP.Client.Ftp.Search(System.String,Limilabs.FTP.Client.RemoteSearchOptions)"/> method.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchItem.GetRemotePath">
            <summary>
            Gets the full remote path of the <see cref="P:Limilabs.FTP.Client.RemoteSearchItem.FtpItem"/> represented by this remote server search result item.
            </summary>
            <returns>Remote server path.</returns>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchItem.FtpItem">
            <summary>
            Gets the <see cref="T:Limilabs.FTP.Client.FtpItem"/> represented by this remote server search result item.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchItem.RemoteFolder">
            <summary>
            Gets the remote folder of this remote server search result item.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchItem.IsFolder">
            <summary>
            Gets the boolean value indicating if this remote server search result item is a folder.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchItem.Size">
            <summary>
            Gets the size of <see cref="P:Limilabs.FTP.Client.RemoteSearchItem.FtpItem"/> represented by this remote server search result item.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.RemoteSearchOptions">
            <summary>
            Represents options for remote server search.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.#ctor">
            <summary>
            Creates new RemoteSearchOptions using default values.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new RemoteSearchOptions using specified values.
            </summary>
            <param name="filePattern">The search string to match against the names of files in path.</param>
            <param name="recursive">Specifies if search should include sub folders.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.UseRegexMatch(System.String)">
            <summary>
            Specifies regex search pattern (e.g. @"^.*\.txt$").
            </summary>
            <param name="filePattern">Regex file pattern.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.UseRegexMatch(System.String,System.String,System.Boolean)">
            <summary>
            Specifies regex search patterns (e.g. @"^.*\.txt$").
            </summary>
            <param name="folderPattern">Regex folder pattern.</param>
            <param name="filePattern">Regex file pattern.</param>
            <param name="ignoreCase">True if case should be ignored, false otherwise.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.UseWildcardMatch(System.String)">
            <summary>
            Specifies wildcard search pattern (e.g. @"*.txt").
            </summary>
            <param name="filePattern">Regex file pattern.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.UseWildcardMatch(System.String,System.String,System.Boolean)">
            <summary>
            Specifies wildcard search patterns (e.g. @"*.txt").
            </summary>
            <param name="folderPattern">Regex folder pattern.</param>
            <param name="filePattern">Regex file pattern.</param>
            <param name="ignoreCase">True if case should be ignored, false otherwise.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.RemoteSearchOptions.UseLambdaMatch(Limilabs.Infrastructure.Func{Limilabs.FTP.Client.FtpItem,System.Boolean})">
            <summary>
            Specifies lambda search function.
            </summary>
            <param name="func">Search function.</param>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.FolderPattern">
            <summary>
            The search string to match against the names of folder in path. Default is "*".
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.FilePattern">
            <summary>
            The search string to match against the names of files in path. Default is "*".
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.IgnoreCase">
            <summary>
            Specifies if <see cref="P:Limilabs.FTP.Client.RemoteSearchOptions.FilePattern"/> and <see cref="P:Limilabs.FTP.Client.RemoteSearchOptions.FolderPattern"/> is case sensitive or not.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.UseRegex">
            <summary>
            Specifies if <see cref="P:Limilabs.FTP.Client.RemoteSearchOptions.FilePattern"/> and <see cref="P:Limilabs.FTP.Client.RemoteSearchOptions.FolderPattern"/> use regex matching (e.g. @"^.*\.txt$) or file matching (e.g. "*.txt").
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.Recursive">
            <summary>
            Specifies if search should include sub folders. Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.RemoteSearchOptions.SymlinkAction">
            <summary>
            Specifies the action to take when symbolic link is found. Default is <see cref="F:Limilabs.FTP.Client.SearchSymlinkAction.Skip"/>.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.SearchSymlinkAction">
            <summary>
            Specifies the action to take when symbolic link is found. 
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.SearchSymlinkAction.Skip">
            <summary>
            Ignore the symlink.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.SearchSymlinkAction.Throw">
            <summary>
            Throw exception when symlink is found.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.SearchSymlinkAction.Follow">
            <summary>
            Try to follow the symlink as regular folder.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ExtensionContainer">
            <summary>
            Represents extensions supported by the remote server.
            You can access this object through <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property.
            It is updated as soon as the connection is made, after login, and every time <see cref="M:Limilabs.FTP.Client.Ftp.Feat"/> method is used.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.ExtensionContainer.GetExtensions">
            <summary>
            Gets all extensions supported by the remote FTP server.
            </summary>
            <returns>Extension list supported by the remote FTP server.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.ExtensionContainer.Supports(Limilabs.FTP.Client.FtpExtension)">
            <summary>
            Checks if the remote FTP server supports specified extension.
            </summary>
            <param name="extension">Extensions to check (e.g. <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/>)</param>
            <returns>Retruns true if the specified extension is supported.</returns>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMLST">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.MLST"/>, <see cref="M:Limilabs.FTP.Client.Ftp.MLST(System.String)"/> and <see cref="M:Limilabs.FTP.Client.Ftp.MLSD"/>, <see cref="M:Limilabs.FTP.Client.Ftp.MLSD(System.String)"/> methods.
            <seealso cref="M:Limilabs.FTP.Client.Ftp.GetList"/>
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMFMT">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.MFMT"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.SetFileModificationTime(System.String,System.DateTime)"/>  method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMDTM">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.MDTM"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.GetFileModificationTime(System.String)"/> and <see cref="M:Limilabs.FTP.Client.Ftp.SetFileModificationTime(System.String,System.DateTime)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsUTF8">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.UTF8"/> is supported. 
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsSize">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.Size"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.GetFileSize(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.Rest"/> extension with <see cref="F:Limilabs.FTP.Client.RestMethod.Stream"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.Int64)"/>, <see cref="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.Int64,System.IO.Stream)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsAuthSSL">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.Auth"/> extension with <see cref="F:Limilabs.FTP.Client.AuthMethod.SSL"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.AuthSSL"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsAuthTLS">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.Auth"/> extension with <see cref="F:Limilabs.FTP.Client.AuthMethod.TLS"/> is supported. 
            True indicates you can use <see cref="M:Limilabs.FTP.Client.Ftp.AuthTLS"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportsModeZ">
            <summary>
            Gets boolean value indicating if <see cref="F:Limilabs.FTP.Client.FtpExtension.Mode"/> extension with <see cref="F:Limilabs.FTP.Client.ModeMethod.ZLib"/> is supported. 
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.UsesCompression"/>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.DontUseCompression"/>
        </member>
        <member name="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes">
            <summary>
            Gets all hash algorithms supported by the remote FTP server.
            You can use values returned by this method as parameters for <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType)"/> and <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType,System.Int64,System.Int64)"/> methods.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpHashType">
            <summary>
            Represents hash algorithm.
            You can use <see cref="T:Limilabs.FTP.Client.Hash.FileHash"/> to compute or check hash of the file.
            You can use <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType)"/> or
            <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType,System.Int64,System.Int64)"/>
            to compute or check hash of the file on FTP server.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpHashType.CRC">
            <summary>
            CRC32 hash type (FTP client uses XCRC command).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpHashType.MD5">
            <summary>
            MD5 hash type (FTP client uses XMD5 command).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpHashType.SHA1">
            <summary>
            SHA-1 hash type (FTP client uses XSHA1 command).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpHashType.SHA256">
            <summary>
            SHA-256 hash type (FTP client uses XSHA256 command).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpHashType.SHA512">
            <summary>
            SHA-512 hash type (FTP client uses XSHA512 command).
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpMode">
            <summary>
            FTP data connection mode (<see cref="F:Limilabs.FTP.Client.FtpMode.Active"/>, <see cref="F:Limilabs.FTP.Client.FtpMode.Passive"/>). Use <see cref="P:Limilabs.FTP.Client.Ftp.Mode"/> property to get or set data connection mode.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpMode.Active">
            <summary>
            Client waits for incomming data connections.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpMode.Passive">
            <summary>
            Client establishes data connections.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpTransferMode">
            <summary>
            Represents FTP transfer mode. Default is <see cref="F:Limilabs.FTP.Client.FtpTransferMode.Stream"/>.
            You can use <see cref="M:Limilabs.FTP.Client.Ftp.SetTransferMode(Limilabs.FTP.Client.FtpTransferMode)"/> method to force transfer mode change.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpTransferMode.Stream">
            <summary>
            Represents stream transfer mode (S)
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpTransferMode.Zlib">
            <summary>
            Represents compressed transfer mode (Z)
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.DirectoryStatus">
            <summary>
            212
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.FileStatus">
            <summary>
            213
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.SyntaxError">
            <summary>
            500
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.NotImplemented">
            <summary>
            502
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.RequestedActionNotTaken">
            <summary>
            550
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.KnownResponseCodes.DirectoryAlreadyExists">
            <summary>
            550
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.BatchProgressEventArgs">
            <summary>
            Represents progress of the current operation
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.BatchProgressEventArgs.CurrentFile">
            <summary>
            Total files already transferred.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.BatchProgressEventArgs.TotalFilesTransferred">
            <summary>
            Total files already transferred.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.BatchProgressEventArgs.TotalFilesToTransfer">
            <summary>
            Total files to transfer.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.BatchProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total bytes to transfer.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.BatchProgressEventArgs.Percentage">
            <summary>
            Percentage of the finished job.
            If <see cref="P:Limilabs.FTP.Client.BatchProgressEventArgs.TotalFilesToTransfer"/> is 0 returns -1.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ProgressEventArgs">
            <summary>
            Represents progress of the current operation
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ProgressEventArgs.TotalBytesTransferred">
            <summary>
            Gets total bytes already transferred.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Gets total bytes to transfer.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ProgressEventArgs.Transferred">
            <summary>
            Gets bytes transfered during last operation.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ProgressEventArgs.Percentage">
            <summary>
            Gets percentage of the finished job. If <see cref="P:Limilabs.FTP.Client.ProgressEventArgs.TotalBytesToTransfer"/> is 0 returns -1.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.SSLConfiguration">
            <summary>
            Represents SSL configuration (client certificates, enabled SSL protocols)
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.SSLConfiguration.SelectLocalCertificate">
            <summary>
            Callback which is called for custom client certificate selection.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.SSLConfiguration.TargetHost">
            <summary>
            Gets or sets the target host name used for authenticating as client.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.SSLConfiguration.CheckCertificateRevocation">
            <summary>
             Specifies whether the certificate revocation list is checked during authentication. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.SSLConfiguration.ClientCertificates">
            <summary>
             The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains client certificates.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.SSLConfiguration.EnabledSslProtocols">
            <summary>
            Represents the protocol used for authentication. Default is <see cref="F:System.Security.Authentication.SslProtocols.Default"/>.
            </summary>
        </member>
        <member name="E:Limilabs.FTP.Client.SSLConfiguration.ServerCertificateValidate">
            <summary>
            Event which is called for custom server certificate validation.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.Hash.FileHash">
            <summary>
            Utility class for computing and validating file checksum.
            You can use 
            <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType)"/> or <see cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType,System.Int64,System.Int64)"/> 
            to obtain the hash value of the file on FTP server.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.#ctor(Limilabs.FTP.Client.FtpHashType)">
            <summary>
            Creates new instance of FileHash class.
            </summary>
            <param name="hashType">Hash type used to create </param>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.String)">
            <summary>
            Computes hash value for specified file.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.String,System.Int32)">
            <summary>
            Computes hash value for specified file.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.Byte[])">
            <summary>
            Computes hash value for specified data.
            </summary>
            <param name="data">Byte array to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.Byte[],System.Int32)">
            <summary>
            Computes hash value for specified data.
            </summary>
            <param name="data">Byte array to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.IO.Stream)">
            <summary>
            Computes hash value for specified stream.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.Compute(System.IO.Stream,System.Int32)">
            <summary>
            Computes hash value for specified stream.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <returns>Hash value.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.String,System.Byte[])">
            <summary>
            Checks if the hash for specified file has correct value.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <param name="expectedHash">Expected hash.</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.String,System.Int32,System.Byte[])">
            <summary>
            Checks if the hash for specified file has correct value.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <param name="expectedHash">Expected hash.</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.IO.Stream,System.Byte[])">
            <summary>
            Checks if the hash for specified stream has correct value.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <param name="expectedHash">Expected hash.</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Checks if the hash for specified stream has correct value.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <param name="expectedHash">Expected hash.</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.String,System.String)">
            <summary>
            Checks if the hash for specified file has correct value.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <param name="expectedHashAsHex">Expected hash encoded as hex string (e.g.: 7BEE53C5).</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.String,System.Int32,System.String)">
            <summary>
            Checks if the hash for specified file has correct value.
            </summary>
            <param name="path">The file to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <param name="expectedHashAsHex">Expected hash encoded as hex string (e.g.: 7BEE53C5).</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.IO.Stream,System.String)">
            <summary>
            Checks if the hash for specified stream has correct value.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <param name="expectedHashAsHex">Expected hash encoded as hex string (e.g.: 7BEE53C5).</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Hash.FileHash.IsValid(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Checks if the hash for specified stream has correct value.
            </summary>
            <param name="stream">The stream to compute hash for.</param>
            <param name="length">Number of bytes to compute hash for.</param>
            <param name="expectedHashAsHex">Expected hash encoded as hex string (e.g.: 7BEE53C5).</param>
            <returns>True if hashes match, false otherwise.</returns>
        </member>
        <member name="T:Limilabs.FTP.Log">
            <summary>
            Represents Ftp.dll log. Use <see cref="P:Limilabs.FTP.Log.Enabled"/> property to turn on logging.
            </summary>
            <remarks>
            You can use following xml in your configuration file to log to file:
            
            <code>
            <configuration>
                <system.diagnostics>
            
                    <trace autoflush="true"/>
               
                    <switches>
                        <add name="Ftp.dll" value="Verbose"/>
                    </switches>
               
                    <sources>
                        <source name="Ftp.dll">
                            <listeners>
                                <add name="FtpLogFile"/>
                            </listeners>
                        </source>
                    </sources>
               
                    <sharedListeners>
                        <add name="FtpLogFile" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\ftp.log"/>
                    </sharedListeners>
            
                </system.diagnostics>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="E:Limilabs.FTP.Log.WriteLine">
            <summary>
            You can subscribe your logging library to this event.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Log.Enabled">
            <summary>
            Gets or sets a value indicating whether logging is enabled or disabled.
            You can observe the log on standard VS output -or- subscribe to <see cref="E:Limilabs.FTP.Log.WriteLine"/> event -or- use application's config file to turn on logging and add your own listeners.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ServerCertificateValidateEventHandler">
            <summary>
            Handler for ServerCertificateValidateEventHandler.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="e">Event arguments. Use <see cref="P:Limilabs.FTP.Client.ServerCertificateValidateEventArgs.IsValid"/> to validate the certificate.</param>
        </member>
        <member name="T:Limilabs.FTP.Licensing.LicenseHelper">
            <summary>
            Utility class for license related functions.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Licensing.LicenseHelper.UseMachineKeyStore(System.Boolean)">
            <summary>
            Sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.
            </summary>
            <param name="value"><c>true</c> if the key should be persisted in the computer key store; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Limilabs.FTP.Licensing.LicenseHelper.GetLicensePath">
            <summary>
            Returns the file path used to load the license file.
            </summary>
            <returns>License file path.</returns>
        </member>
        <member name="M:Limilabs.FTP.Licensing.LicenseHelper.GetLicenseStatus">
            <summary>
            Gets the status of the license file.
            </summary>
            <returns>License file status.</returns>
        </member>
        <member name="T:Limilabs.FTP.Licensing.LicenseStatus">
            <summary>
            Status of the license validation.
            </summary>
            <seealso cref="M:Limilabs.FTP.Licensing.LicenseHelper.GetLicenseStatus"/>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.NotLoaded">
            <summary>
            There was no attempt to load and check the license file yet.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.NoLicenseFile">
            <summary>
            There is no license file in appropriate folder. 
            Please check the value of <see cref="M:Limilabs.FTP.Licensing.LicenseHelper.GetLicensePath"/> method and place your license there.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.Invalid">
            <summary>
            License was loaded, but is invalid.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.InvalidXml">
            <summary>
            License was loaded, but the XML is invalid.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.InvalidSignature">
            <summary>
            License was loaded, but it has invalid signature.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.InvalidLicenseXml">
            <summary>
            License was loaded, but the XML is not a license.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.Exception">
            <summary>
            License was loaded, but an exception occurred.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.Valid">
            <summary>
            License was loaded and is valid.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.LicenseStatus.Revoked">
            <summary>
            Valid license was loaded, but was revoked.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Licensing.PleasePurchaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Licensing.PleasePurchaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Limilabs.FTP.Licensing.PleasePurchaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Limilabs.InternalLicensing.ILicenseLoader.IsLicensePresent">
            <summary>
            Checks if license exists. May throw exception on error.
            </summary>
            <returns>True if license is present, false otherwise</returns>
        </member>
        <member name="M:Limilabs.InternalLicensing.ILicenseLoader.Load">
            <summary>
            Loads the license document. May throw exception on error.
            </summary>
            <returns>Loaded XML license document</returns>
        </member>
        <member name="T:Limilabs.InternalLicensing.SnkUtil">
            <summary>
            NOTE: These methods assume 1024 bit keys, the same as exported from sn.exe.
            </summary>
        </member>
        <member name="F:Limilabs.InternalLicensing.SnkUtil._rsa1Header">
            <summary>
            RSA1 header (public only)
            </summary>
        </member>
        <member name="F:Limilabs.InternalLicensing.SnkUtil._rsa2Header">
            <summary>
             RSA2 header
            </summary>
        </member>
        <member name="M:Limilabs.InternalLicensing.SnkUtil.GetRSAFromSnkFile(System.String)">
            <summary>
            Returns RSA object from *.snk key file.
            </summary>
            <param name="path">Path to snk file.</param>
            <returns><c>RSACryptoServiceProvider</c></returns>
        </member>
        <member name="M:Limilabs.InternalLicensing.SnkUtil.GetRSAParameters(System.Byte[])">
            <summary>
            Returns <c>RSAParameters</c> from byte[].
            Example to get rsa public key from assembly:
            <example>
            byte[] keyBytes=System.Reflection.Assembly.GetExecutingAssembly().GetName().GetPublicKey();
            RSAParameters p = SnkUtil.GetRSAParameters(keyBytes); 
            </example>
            </summary>
            <returns>RSAParameters</returns>
        </member>
        <member name="M:Limilabs.InternalLicensing.SnkUtil.IsPublicLength(System.Byte[])">
            <summary>
            Returns true if buffer length is public key size.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.Syst">
            <summary>
            FTP server system. Use <see cref="M:Limilabs.FTP.Client.Ftp.GetSystem"/> to retrieve server system.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Syst.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Syst.Unix">
            <summary>
            Unix
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Syst.Netware">
            <summary>
            Netware
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Syst.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.Range">
            <summary>
            Represents positive range of values.
            Range(1, 3) represents values: 1,2,3.
            Range(1, 1) represents single value: 1.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Create new range with specified minimum and maximum values.
            </summary>
            <param name="min">Minimum value included in this range.</param>
            <param name="max">Maximum value included in this range.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Range.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>String that represents the current object.</returns>
        </member>
        <member name="P:Limilabs.FTP.Client.Range.Min">
            <summary>
            Minimum value included in this range.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Range.Max">
            <summary>
            Maximum value included in this range.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpItem">
            <summary>
            Represents system entry (folder, file, link) stored on the server.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.FtpItem.ToString">
            <summary>
            Returns the name of this file system object. 
            </summary>
            <returns>Name of this file system object. </returns>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.Name">
            <summary>
            Gets the name of the file system object.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.SymlinkPath">
            <summary>
            Gets the path of the symbolic link.
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.FtpItem.IsSymlink"/>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.Size">
            <summary>
            Gets size of the file system object.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.ModifyDate">
            <summary>
            Gets the last modification date of the file system object.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.IsParentFolder">
            <summary>
            Returns true if object represents parent folder (".", "..").
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.IsCurrentFolder">
            <summary>
            Returns true if object represents current folder.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.IsFolder">
            <summary>
            Returns true if object represents folder.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.IsFile">
            <summary>
            Returns true if object represents file.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.IsSymlink">
            <summary>
            Returns true if object represents symbolic link.
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.FtpItem.SymlinkPath"/>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.UnixPermissions">
            <summary>
            Gets UNIX permissions for this item.
            This property is filled by <see cref="M:Limilabs.FTP.Client.Ftp.List"/> method (when remote server is running on UNIX/LINUX operating system)
            or by <see cref="M:Limilabs.FTP.Client.Ftp.GetList"/> (when <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/> is NOT supported and remote server is running on UNIX/LINUX operating system).
            </summary>
            <remarks>May be null.</remarks>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.Permissions">
            <summary>
            Gets MLSD permissions for this item.
            This list is filled by <see cref="M:Limilabs.FTP.Client.Ftp.MLSD"/> method or by <see cref="M:Limilabs.FTP.Client.Ftp.GetList"/> 
            (when <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/> is supported and perm fact is returned by the server).
            </summary>
            <remarks>May be null.</remarks>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpItem.Extensions">
            <summary>
            Provides access to additional elements parsed from the server response.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpDataType">
            <summary>
            Represents data connection transfer type (<see cref="F:Limilabs.FTP.Client.FtpDataType.Binary"/>, <see cref="F:Limilabs.FTP.Client.FtpDataType.Ascii"/>). 
            You can use <see cref="P:Limilabs.FTP.Client.Ftp.TransfersDataType"/> to specify default transfer type explicitly.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpDataType.Binary">
            <summary>
            Binary transfer type (I).
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpDataType.Ascii">
            <summary>
            ASCII transfer type (A)
            RFC 959: The sender converts the data from an internal character representation to the standard 8-bit NVT-ASCII.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.FtpDataType.Ebcdic">
            <summary>
            EBCDIC transfer type (E)
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.Ftp">
            <summary>
            FTP client implementation. 
            Allows listing, moving, copying, downloading and uploading files using FTP/FTPS protocol.
            </summary>
            <remarks>
            <a href="http://www.limilabs.com/ftp/rfc/5797">FTP Command and Extension Registry</a>
            </remarks>
        </member>
        <member name="T:Limilabs.FTP.Client.TcpTextClient">
            <summary>
            Implements TCP/IP text client.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the TcpTextClient object.
            Sets <see cref="P:Limilabs.FTP.Client.TcpTextClient.ReceiveTimeout"/> and <see cref="P:Limilabs.FTP.Client.TcpTextClient.SendTimeout"/> to 20 sec.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.KeepAliveTcp(System.TimeSpan,System.TimeSpan)">
            <summary>
            Sets TCP protocol keep alive (SO_KEEPALIVE) option on.
            </summary>
            <param name="keepAliveTime">Duration between two keepalive transmissions in idle condition (TCP protocol default is 2h).</param>
            <param name="keepAliveInterval">Duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received (TCP protocol default is 1s).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.GetServerGreeting">
            <summary>
            Override this function to get server's greeting.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to server. Use <see cref="M:Limilabs.FTP.Client.TcpTextClient.ConnectSSL(System.String,System.Int32)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.ConnectSSL(System.String,System.Int32)">
            <summary>
            Connects to server using SSL.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Connect(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="ipAddress">IP address.</param>
            <param name="port">Port number.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection.</param>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="ipEndPoint">IP end point of the connection.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection.</param>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            -ERR response,
            Connection error.
             </exception>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to server.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port number.</param>
            <param name="useSSL">if <c>true</c> creates SSL connection</param>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            Error response, connection error.
             </exception>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
            <param name="ipEndPoint">Network endpoint (IP address and port) of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnectSSL(System.String,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnectSSL(System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnect(System.String,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote server connection. You can use <see cref="M:Limilabs.FTP.Client.TcpTextClient.BeginConnectSSL(System.String,System.Int32)"/> when SSL connection is needed.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnect(System.String,System.Int32,System.Boolean)">
            <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="result">Object that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Send(System.String)">
            <summary>
            Sends the text command to server.
            Adds "\r\n" to the command.
            </summary>
            <exception cref="T:Limilabs.FTP.Client.FtpException">
            An error occurred when accessing the socket.
            -or-
            The <see cref="T:System.Net.Sockets.NetworkStream"/> is closed.
            -or-
            There is a failure reading from the network.
            </exception>
            <param name="command">Text command to send.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Dispose(System.Boolean)">
            <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
            <param name="disposing">Indicates if invoked by Dipsose method.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.TcpTextClient.Dispose">
            <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.SSLConfiguration">
            <summary>
            Gets SSL configuration for this object (client certificates, enabled SSL protocols).
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time the underlying <see cref="T:System.Net.Sockets.Socket"/> will wait to receive data once a read operation is initiated.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.SendTimeout">
            <summary>
            Gets or sets the amount of time the underlying <see cref="T:System.Net.Sockets.Socket"/> will wait for a send operation to complete successfully.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> is connected to a remote host.
            This property makes a nonblocking, zero-byte Send call to determine the current state of the connection.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.IsEncrypted">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is encrypted.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.IsSigned">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is signed.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.TcpTextClient.IsMutuallyAuthenticated">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is mutually authenticated.
            </summary>
        </member>
        <member name="E:Limilabs.FTP.Client.TcpTextClient.ServerCertificateValidate">
            <summary>
            Event which is called for custom server certificate validation.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Ftp.DefaultPort">
            <summary>
            Gets the number of default port used for FTP's control connection.
            </summary>
        </member>
        <member name="F:Limilabs.FTP.Client.Ftp.DefaultSSLPort">
            <summary>
            Gets the number of default port used for FTP's control connection using SSL.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.#ctor">
            <summary>
            Initializes new instance of the Ftp class (IPv4 is used).
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Ftp class.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetServerGreeting">
            <summary>
            Get server's greeting.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Connect(System.String)">
            <summary>
            Connects to FTP server on port 21. Use <see cref="M:Limilabs.FTP.Client.Ftp.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Target host name or IP address.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.ConnectSSL(System.String)">
            <summary>
            Connects to FTP server using SSL on port 990.
            Please use <see cref="E:Limilabs.FTP.Client.TcpTextClient.ServerCertificateValidate"/> for self signed certificates.
            </summary>
            <param name="host">Target host name or IP address.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.BeginConnect(System.String)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.FTP.Client.Ftp.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.BeginConnect(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.FTP.Client.Ftp.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.BeginConnectSSL(System.String)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.FTP.Client.Ftp.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.BeginConnectSSL(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.FTP.Client.Ftp.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.AuthSSL">
            <summary>
            Secures the communication with remote server using SSL (explicit SSL).
            Please use <see cref="E:Limilabs.FTP.Client.TcpTextClient.ServerCertificateValidate"/> event to handle self signed certificates.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.AuthTLS">
            <summary>
            Secures the communication with remote server using TLS (explicit SSL/TLS) (<a href="http://www.limilabs.com/ftp/rfc/4217">RFC 4217</a>).
            Please use <see cref="E:Limilabs.FTP.Client.TcpTextClient.ServerCertificateValidate"/> event to handle self signed certificates.
            </summary>
            <remarks>
            As the SSL/TLS protocols self-negotiate their levels, there is no need to distinguish between SSL and TLS.
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SendCommand(System.String,System.Object[])">
            <summary>
            Executes command on the FTP server.
            </summary>
            <param name="command">Command (e.g. "HELP {0}").</param>
            <param name="args">Command arguments.</param>
            <returns>FTP server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SendCommand(System.String,System.Boolean,System.Object[])">
            <summary>
            Executes command on the FTP server.
            </summary>
            <param name="command">Command (e.g. "HELP {0}").</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.FTP.Client.FtpException"/> on negative response.</param>
            <param name="args">Command arguments.</param>
            <returns>FTP server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SendCommand(System.String)">
            <summary>
            Executes command on the FTP server.
            </summary>
            <param name="command">Command (e.g. "HELP").</param>
            <returns>FTP server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SendCommand(System.String,System.Boolean)">
            <summary>
            Executes command on the FTP server.
            </summary>
            <param name="command">Command (e.g. "HELP").</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.FTP.Client.FtpException"/> on negative response.</param>
            <returns>FTP server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Login(System.String)">
            <summary>
            Logs user in using specified user and empty password.
            </summary>
            <param name="user">User's login.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.LoginAnonymous">
            <summary>
            Logs user in using "anonymous" as user and "anonymous@example.com" as password.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Login(System.String,System.String)">
            <summary>
            Logs user in.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetSystem">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <returns>Remote OS.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Feat">
            <summary>
            Returns the list of additional features supported by the remote server (FEAT command).
            </summary>
            <returns>Additional features supported by the remote server</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetCurrentFolder">
            <summary>
            Gets the absolute path of the current working folder on the remote server.
            </summary>
            <returns>Absolute path of the current working remote folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.ChangeFolder(System.String)">
            <summary>
            Changes the current working folder on the server.
            </summary>
            <param name="folder">Pathname of the folder to change to.</param>
            <returns>Absolute path of the current working remote folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.ChangeFolderUp">
            <summary>
            Changes the current working folder on the server one level up.
            </summary>
            <returns>Absolute path of the current working remote folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.CreateFolder(System.String)">
            <summary>
            Creates a folder on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote folder.</param>
            <returns>Absolute path of the newly created or already existing remote folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.CreateAllFolders(System.String)">
            <summary>
            Creates all the directories and subdirectories in a specified by the <paramref name="remotePath"/>.
            Some servers implement this feature by default, in such case you can use <see cref="M:Limilabs.FTP.Client.Ftp.CreateFolder(System.String)"/> method.
            </summary>
            <param name="remotePath">Pathname of the new remote folder.</param>
            <returns>Absolute path of the newly created remote folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DeleteFolder(System.String)">
            <summary>
            Deletes an empty remote folder with the specified pathname.
            </summary>
            <param name="folder">Remote folder pathname.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DeleteFolderRecursively(System.String)">
            <summary>
            Deletes remote folder recursively with the specified pathname.
            </summary>
            <param name="folder">Remote folder pathname.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Rename(System.String,System.String)">
            <summary>
            Renames a file or folder on the server. 
            </summary>
            <param name="from"> The pathname of the remote file or folder to be renamed.</param>
            <param name="to">The pathname to rename the file or folder to.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetFileSize(System.String)">
            <summary>
            Returns the size of the specified remote file.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsSize"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <remarks>
            On some servers this command works on folders.
            </remarks>
            <param name="remotePath">The path of the remote file.</param>
            <returns>Size of the specified file in bytes.</returns>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsSize"/>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetFileModificationTime(System.String)">
            <summary>
            Returns the modification date and time of the specified remote file.
            This method uses MDTM command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>), that may be NOT supported by the server.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMDTM"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <remarks>
            On some servers this command works on folders.
            </remarks>
            <param name="remotePath">The path of the remote file or folder.</param>
            <returns>Modification date of the specified file or folder.</returns>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMDTM"/>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SetFileModificationTime(System.String,System.DateTime)">
            <summary>
            Sets the modification date and time of the specified remote file.
            This method uses MFTM (<a href="http://www.limilabs.com/ftp/rfc/draft-somers-ftp-mfxx-04">draft-somers-ftp-mfxx-04</a>) or MDTM (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>) commands, that may be NOT supported by the server.
            </summary>
            <remarks>
            On some servers this command works on folders.
            </remarks>
            <param name="remotePath">The path of the remote file or folder.</param>
            <param name="newDateTime">New last modification date of the specified file or folder.</param>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMFMT"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsMDTM"/>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SetTransferMode(Limilabs.FTP.Client.FtpTransferMode)">
            <summary>
            Forces transfer mode change.
            </summary>
            <param name="mode">Transfer mode to set (<see cref="F:Limilabs.FTP.Client.FtpTransferMode.Stream"/>, <see cref="F:Limilabs.FTP.Client.FtpTransferMode.Zlib"/>).</param>
            <remarks>
            Compresion (<see cref="F:Limilabs.FTP.Client.FtpTransferMode.Zlib"/>) is turned on automatically when remote FTP server supports it (<see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsModeZ"/>).
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Append(System.String,System.Byte[])">
            <summary>
            Appends the content of the byte array to the file on the server, creating it if it doesn't exists.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="data">The source data.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Append(System.String,System.IO.Stream)">
            <summary>
            Appends the content of the data streamto the file on the server, creating it if it doesn't exists.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="source">The source data stream.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.String)">
            <summary>
            Uploads the content of the local file to the file on the server, overriding it if it already exists.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.Byte[])">
            <summary>
            Uploads the content of the byte array to the file on the server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="data">The source data.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.Int64,System.Byte[])">
            <summary>
            Uploads the content of the byte array to the file on the server starting from the specified remote position.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <seealso cref="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType)"/>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteStartPosition">The starting offset of the remote file.</param>
            <param name="data">The source data.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.IO.Stream)">
            <summary>
            Uploads the content of the data stream to the file on the server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="source">The source data stream.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Upload(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Uploads the content of the data stream to the file on the server from the specified remote position.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteStartPosition">The starting offset of the remote file.</param>
            <param name="source">The source data stream.</param>
            <returns>Server response send after the transfer completed.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Noop">
            <summary>
            Sends NO OPeration command to the server.
            </summary>
            <returns>Server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadUnique(System.Byte[])">
            <summary>
            Uploads the content of the local file to the file with unique name on the server.
            </summary>
            <param name="data">The source data.</param>
            <returns>Name of the newly created unique file on the server.</returns>
            <remarks>
            Some servers support this command incorrectly (MS FTP).
            Microsoft FTP Service does not return the filename in passive mode: 125 Data connection already open; Transfer starting.
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadUnique(System.IO.Stream)">
            <summary>
            Uploads the content of the stream to the file with unique name on the server.
            </summary>
            <param name="source">The source data stream.</param>
            <returns>Name of the newly created unique file on the server.</returns>
            <remarks>
            Some servers support this command incorrectly (MS FTP).
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetList">
            <summary>
            Returns parsed list of files and folders in the current server folder.
            </summary>
            <returns>List containing files and folders.</returns>
            <remarks>
             This method will use the MLSD command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>) if the server supports it, and the LIST command (<a href="http://www.limilabs.com/ftp/rfc/959">RFC 959</a>) if MLSD is not supported.
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetList(System.String)">
            <summary>
            Returns parsed list of files and folders in the specific server folder.
            </summary>
            <param name="remotePath">The path of the remote file or folder.</param>
            <returns>List containing files and folders.</returns>
            <remarks>
             This method will use the MLSD command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>) if the server supports <see cref="F:Limilabs.FTP.Client.FtpExtension.MLST"/> extension and the LIST command (<a href="http://www.limilabs.com/ftp/rfc/959">RFC 959</a>) if this extensions is not supported.
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.List">
            <summary>
            Returns parsed list of files and folders in the current server folder. This method uses LIST command.
            There is no standard that describes LIST command response, <see cref="M:Limilabs.FTP.Client.Ftp.GetList"/> is a better choice in most cases.
            </summary>
            <returns>List containing files and folders.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.List(System.String)">
            <summary>
            Returns parsed list of files and folders in the specified server folder. This method uses LIST command (<a href="http://www.limilabs.com/ftp/rfc/959">RFC 959</a>).
            There is no standard that describes LIST command response, <see cref="M:Limilabs.FTP.Client.Ftp.GetList(System.String)"/> is a better choice in most cases.
            </summary>
            <param name="remotePath">The path of the remote file or folder.</param>
            <returns>List containing files and folders.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Site(System.String)">
            <summary>
            Sends SITE command to the server.
            </summary>
            <param name="argument">SITE command argument.</param>
            <returns>Server response.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SiteChangeMode(System.String,Limilabs.FTP.Client.UnixPermissionSet)">
            <summary>
            Executes SITE CHMOD command - changes the permissions of the file to specified value
            </summary>
            <param name="remotePath">File to change permissions for.</param>
            <param name="set">New permissions to set.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.SiteChangeMode(System.String)">
            <summary>
            Executes SITE CHMOD command: removes all privileges for all.
            </summary>
            <param name="remotePath">File to change permissions for.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.MLSD">
            <summary>
            Returns parsed list of files and folders in the current server folder. 
            This method uses MLSD command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>), that may be NOT supported by the server.
            </summary>
            <returns>List containing files and folders.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.MLSD(System.String)">
            <summary>
            Returns parsed list of files and folders in the specified folder or file information in case of a file.
            This method uses MLSD command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>), that may be NOT supported by the server.
            </summary>
            <param name="remotePath">The path of the remote file or folder.</param>
            <returns>List containing files and folders.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.MLST">
            <summary>
            Returns information about current server folder.
            This method uses MLST command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>), that may be NOT supported by the server.
            </summary>
            <remarks>
            Returns name as full path.
            </remarks>
            <returns>Current folder information.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.MLST(System.String)">
            <summary>
            Returns information about current server folder.
            This method uses MLST command (<a href="http://www.limilabs.com/ftp/rfc/3659">RFC 3659</a>), that may be NOT supported by the server.
            </summary>
            <remarks>
            Returns name as full path.
            </remarks>
            <param name="remotePath">The path of the remote file or folder.</param>
            <returns>Information about specified file or folder.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DownloadFiles(System.String,System.String)">
            <summary>
            Downloads remote files to local location.
            </summary>
            <param name="remoteFolderPath">Remote folder to download from.</param>
            <param name="localFolderPath">Local folder to download to.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DownloadFiles(System.String)">
            <summary>
            Downloads remote files from the current server folder to the local location.
            </summary>
            <param name="localFolderPath">Local folder to download to.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DownloadFiles(System.String,System.String,Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Downloads remote files to the local location.
            </summary>
            <param name="remoteFolderPath">Remote folder to download from.</param>
            <param name="localFolderPath">Local folder to download to.</param>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DownloadFiles(System.String,System.Collections.Generic.List{Limilabs.FTP.Client.RemoteSearchItem})">
            <summary>
            Downloads remote files to the local location.
            </summary>
            <param name="remote">Remote search items returned by a call to <see cref="M:Limilabs.FTP.Client.Ftp.Search(Limilabs.FTP.Client.RemoteSearchOptions)"/> or <see cref="M:Limilabs.FTP.Client.Ftp.Search(System.String,Limilabs.FTP.Client.RemoteSearchOptions)"/>.</param>
            <param name="localFolderPath">Local folder to download to.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DownloadFiles(System.String,Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Downloads remote files from the current server folder to local location.
            </summary>
            <param name="localFolderPath">Local folder to download to.</param>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadFiles(System.String,System.String)">
            <summary>
            Uploads local files to remote location.
            </summary>
            <param name="remotePath">Remote folder to upload to.</param>
            <param name="localPath">Local folder to upload from.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadFiles(System.String)">
            <summary>
            Uploads local files to the current remote server location.
            </summary>
            <param name="localPath">Local folder to upload from.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadFiles(System.String,System.String,Limilabs.FTP.Client.LocalSearchOptions)">
            <summary>
            Uploads local files to remote location.
            </summary>
            <param name="remoteFolderPath">Remote folder to upload to.</param>
            <param name="localFolderPath">Local folder to upload from.</param>
            <param name="options">Options for local search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.UploadFiles(System.String,Limilabs.FTP.Client.LocalSearchOptions)">
            <summary>
            Uploads local files to the current remote server location.
            </summary>
            <param name="localFolderPath">Local folder to upload from.</param>
            <param name="options">Options for local search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Download(System.String)">
            <summary>
            Downloads the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <returns>Downloaded data.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.Int64)">
            <summary>
            Downloads the remote file starting from the specified position.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteStartPosition">The starting offset of the remote file.</param>
            <returns>Downloaded data.</returns>        
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.String)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Download(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Downloads the remote file to the data stream starting from the specified position.
            You can check the value of <see cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportsRestStream"/> of <see cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> property to check if this method is supported by the remote server.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="remoteStartPosition">The starting offset of the remote file.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DeleteFile(System.String)">
            <summary>
            Deletes the file on the server.
            </summary>
            <param name="remotePath">The pathname of the file to be deleted. Either an absolute pathname or relative to the current working folder.</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DeleteFiles(System.String,Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Deletes files from the server, that match specified pattern.
            </summary>
            <param name="remoteFolderPath">Remote folder to download from.</param>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.DeleteFiles(Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Deletes files from the current server folder, that match specified pattern.
            </summary>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Search">
            <summary>
            Returns all files and folders on the server.
            </summary>
            <returns>All files and folders on the server.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Search(Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Searches files and folders on the server that match specified pattern.
            </summary>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
            <returns>Items that match the search query.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Search(System.String,Limilabs.FTP.Client.RemoteSearchOptions)">
            <summary>
            Searches files and folders on the server that match specified pattern.
            </summary>
            <param name="remoteFolderPath">Remote folder to search.</param>
            <param name="options">Options for remote search (e.g.: recursive, search pattern).</param>
            <returns>Items that match the search query.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Abort">
            <summary>
            Aborts current transfers.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.FileExists(System.String)">
            <summary>
            Detects whether the specified file exists on the server.
            </summary>
            <param name="remotePath">The path of the remote file to check.</param>
            <returns>True if the file exists, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.FolderExists(System.String)">
            <summary>
            Detects whether the specified folder exists on the server.
            </summary>
            <param name="remotePath">The path of the remote folder to check.</param>
            <returns><see langword="True"/> if the folder exists, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetSupportedHashTypes">
            <summary>
            Returns checksum types supported by the server.
            </summary>
            <returns>Checksum types supported by the server.</returns>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType)">
            <summary>
            Returns the checksum of the specified remote file.
            You can use <see cref="T:Limilabs.FTP.Client.Hash.FileHash"/> class to compute or validate local file checksum.        
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/>
            <param name="remotePath">The path of the remote file.</param>
            <param name="type">Hash algorithm used.</param>
            <returns>Checksum of the specified remote file.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.GetFileHash(System.String,Limilabs.FTP.Client.FtpHashType,System.Int64,System.Int64)">
            <summary>
            Returns the checksum of the specified remote file.
            You can use <see cref="T:Limilabs.FTP.Client.Hash.FileHash"/> class to compute or validate local file checksum.
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.Extensions"/> <seealso cref="P:Limilabs.FTP.Client.ExtensionContainer.SupportedHashTypes"/>
            <param name="remotePath">The path of the remote file.</param>
            <param name="type">Hash algorithm used.</param>
            <param name="start">The offset in remote file where reading will start.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Checksum of the specified remote file.</returns>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.KeepAliveDuringTransfer(System.TimeSpan)">
            <summary>
            Sets the interval, at which a NOOP command is sent on the control conenction during a file transfer.
            </summary>
            <param name="noopInterval">Specifies interval at which a NOOP command will be sent on the  control conenction during transfer. <see cref="F:System.TimeSpan.Zero"/> indicates that no NOOP command should be sent.</param>
            <remarks>
            Setting keep alive can be useful to prevent routers from prematurely closing the command channel while a long data transfer is taking place. 
            It is generally not necessary to set a value less than 15 minutes (900 seconds).
            Not all FTP servers support receiving NOOP commands during file transfers.
            It's been observed that these servers will act strangely: not reply to the command, or only send the reply after the file transfer has completed.
            This will cause the component to throw a timeout exception since it's expecting a reply within the timeout period.
            If you see this behavior, consider not using this method.
            </remarks>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Close">
            <summary>
            Sends QUIT command. Releases all resources acquired by this object.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.Ftp.Close(System.Boolean)">
            <summary>
            Sends QUIT command. Releases all resources acquired by this object.
            </summary>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.FTP.Client.FtpResponseException"/> on error response to QUIT command.</param>
        </member>
        <member name="E:Limilabs.FTP.Client.Ftp.Progress">
            <summary>
            Reports progress of the current upload or download. This event may be raised from a diffrent thread. 
            </summary>
        </member>
        <member name="E:Limilabs.FTP.Client.Ftp.BatchProgress">
            <summary>
            Reports progress of the current batch upload or download.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.Extensions">
            <summary>
            Gets features container that can be used to check what <see cref="T:Limilabs.FTP.Client.FtpExtension"/>s are supported by the server.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.Mode">
            <summary>
            FTP data connection mode: Active (client waits for incoming data connections) or Passive (client establishes data connections).
            Passive is default.
            </summary>
            <remarks>You can specifies ports to use in active mode by using <see cref="P:Limilabs.FTP.Client.Ftp.ActiveModePorts"/> property.</remarks>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.ActiveModePorts">
            <summary>
            Gets or sets the port range used in <see cref="F:Limilabs.FTP.Client.FtpMode.Active"/> mode.
            This has no effect for passive mode transfers.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.ActiveModeAddress">
            <summary>
            Gets or sets the IP address announced to the FTP server when establishing an <see cref="F:Limilabs.FTP.Client.FtpMode.Active"/> mode data transfer.  
            Don't set this unless needed. 
            By default, the value of this property is <see cref="F:System.Net.IPAddress.None"/> which means that the address of the network interface is used instead. 
            This has no effect for passive mode transfers.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.ActiveModeDisableLocalAddressFix">
            <summary>
            Gets or sets the value indicating if a workaround for FTP servers that announce private range IP addresses even though a public IP was used for control connection.
            By default, when such address is detected, an IP address announced by the server in response to PASV command used is 
            overrode with control connection address. Default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.TransfersDataType">
            <summary>
            Gets or sets data type used for all data transfers. Default is <see cref="F:Limilabs.FTP.Client.FtpDataType.Binary"/> (I).
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.ASCIIChangeNewLines">
            <summary>
            Specifies if new lines should be changed when <see cref="P:Limilabs.FTP.Client.Ftp.TransfersDataType"/> is set to <see cref="F:Limilabs.FTP.Client.FtpDataType.Ascii"/> transfers. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.ProtectionBufferSize">
            <summary>
             Gets or sets the maximum size, in bytes, of the encoded data blocks to be sent or received during file transfer.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.IgnorePassiveModeAddress">
            <summary>
            Ignores address sent by sever for data connections in <see cref="F:Limilabs.FTP.Client.FtpMode.Passive"/> mode. Default value is false.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.DontUseCompression">
            <summary>
            Forces the compression not to be used. You should set this field before connecting to the remote server. Default value is false.
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.UsesCompression"/>
        </member>
        <member name="P:Limilabs.FTP.Client.Ftp.UsesCompression">
            <summary>
            Gets a value indicating whether the compression is used for data transfers. 
            </summary>
            <seealso cref="P:Limilabs.FTP.Client.Ftp.DontUseCompression"/>
        </member>
        <member name="T:Limilabs.FTP.Client.FtpResponse">
            <summary>
            Represents server response to FTP command.
            </summary>
        </member>
        <member name="M:Limilabs.FTP.Client.FtpResponse.ToString">
            <summary>
            Returns <see cref="P:Limilabs.FTP.Client.FtpResponse.Message"/> of this response.
            </summary>
            <returns><see cref="P:Limilabs.FTP.Client.FtpResponse.Message"/> of this response</returns>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.Code">
            <summary>
            Gets response code.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.Message">
            <summary>
            Gets response message.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsPositive">
            <summary>
            Returns <see langword="true"/> if response was positive. (1xy, 2yz, 3xy)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsPositivePreliminary">
            <summary>
            Returns <see langword="true"/> if the requested action has successfully started, but another reply is to be expected before the client issues another command. 
            (1yz Positive Preliminary reply)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsPositiveCompletion">
            <summary>
            Returns <see langword="true"/> if response was positive completion. (2yz)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsPositiveIntermediate">
            <summary>
            Returns <see langword="true"/> if the requested action has been accepted, but more information is required. The client should send another command in reply. 
            (3yz Positive Intermediate reply)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsNegative">
            <summary>
            Returns <see langword="true"/> if the  command failed, but it can be retried. (4yz Transient Negative reply)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.IsNegativePermanently">
            <summary>
            Returns <see langword="true"/> if the command failed permanently. (5yz Permanent Negative reply)
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.Lines">
            <summary>
            Gets all lines (except <see cref="P:Limilabs.FTP.Client.FtpResponse.EndLine"/>) returned by multi-line response.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.FtpResponse.EndLine">
            <summary>
            Gets the last line returned by multi-line response.
            </summary>
        </member>
        <member name="T:Limilabs.FTP.Client.ServerCertificateValidateEventArgs">
            <summary>
            Arguments for <see cref="T:Limilabs.FTP.Client.ServerCertificateValidateEventHandler"/> and <see cref="E:Limilabs.FTP.Client.TcpTextClient.ServerCertificateValidate"/> event.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ServerCertificateValidateEventArgs.Certificate">
            <summary>
            The certificate used to authenticate the remote party.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ServerCertificateValidateEventArgs.Chain">
            <summary>
            The _chain of certificate authorities associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ServerCertificateValidateEventArgs.SslPolicyErrors">
            <summary>
            One or more errors associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Limilabs.FTP.Client.ServerCertificateValidateEventArgs.IsValid">
            <summary>
            Set this field to indicate validness of server's certificate.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotNull(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException when argument is null.
            </summary>
            <param name="argument">Argument that must be != null.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.Is(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is not met.
            </summary>
            <param name="condition">Condition that is required.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNot(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is met.
            </summary>
            <param name="condition">Condition that is excluded.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotNullNorEmpty(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is null or is empty.
            </summary>
            <param name="argument">Argument that must be != null and != string.Empty.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotBlank(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is blank.
            </summary>
            <param name="argument">Argument that must not be blank.</param>
            <param name="message">Message.</param>
        </member>
        <member name="T:Limilabs.Infrastructure.Func`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg0">The parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="P:Limilabs.Parsers.NameValueParameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Limilabs.Parsers.NameValueParameter.Value">
            <summary>
            Gets parameter value.
            </summary>
        </member>
        <member name="M:Limilabs.Parsers.ParameterList.GetValue(System.String)">
            <summary>
            Gets value of the parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Value of the query parameter with specified name -or- <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Limilabs.Parsers.ParameterList.Add(System.String,System.String)">
            <summary>
            Adds new query parameter with specified name and value to this collection.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:Limilabs.Parsers.ParameterList.Add(Limilabs.Parsers.NameValueParameter)">
            <summary>
            Adds specified query parameter to this collection.
            </summary>
            <param name="NameValueParameter">Parameter to add.</param>
        </member>
        <member name="M:Limilabs.Parsers.ParameterList.Parse(System.String)">
            <summary>
            Parses specified query string and creates parameter collection.
            </summary>
            <param name="s">String to parse.</param>
            <returns>New parameter list.</returns>
        </member>
        <member name="M:Limilabs.Parsers.ParameterList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator that iterates through the collection</returns>
        </member>
        <member name="P:Limilabs.Parsers.ParameterList.Count">
            <summary>
            Gets the number of parameters in this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Parsers.ParameterList.Item(System.String)">
            <summary>
            Gets parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Parameter with specified name -or- <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Limilabs.Parsers.StringWalker.MoveOneForward">
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="T:Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:Ionic.Crc.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/> and <see cref="T:Ionic.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Ionic.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
        </member>
        <member name="F:Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ionic.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class performs DEFLATE compression through writing.  For
               more information on the Deflate algorithm, see IETF RFC 1951,
               "DEFLATE Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>, except
               that this class is for compression only, and this implementation uses an
               approach that employs multiple worker threads to perform the DEFLATE.  On
               a multi-cpu or multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream, particularly
               for larger streams.  How large?  Anything over 10mb is a good candidate
               for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower than
               the default value.  Your mileage may vary. Finally, for small files, the
               ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead associated to using the thread
               pool.
             </para>
            
             </remarks>
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:Ionic.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <param name="stream">
               The new output stream for this era.
             </param>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">
              The buffer into which data would be read, IF THIS METHOD
              ACTUALLY DID ANYTHING.
            </param>
            <param name="offset">
              The offset within that data array at which to insert the
              data that is read, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <param name="count">
              The number of bytes to write, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <returns>nothing.</returns>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">
              The offset to seek to....
              IF THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <param name="origin">
              The reference specifying how to apply the offset....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <returns>nothing. It always throws.</returns>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory buffer
               pairs to create.  The implementation of this stream allocates
               multiple buffers to facilitate parallel compression.  As each buffer
               fills up, this stream uses <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>
               to compress those buffers in a background threadpool thread. After a
               buffer is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see cref="P:Ionic.Zlib.ParallelDeflateOutputStream.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value
               at any time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but may result in less effective compression.  For example,
               using the default buffer size of 128k, the compression delivered is
               within 1% of the compression delivered by the single-threaded <see cref="T:Ionic.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (N*S*2), where N is the number of buffer pairs, and S is the size of
               each buffer (this property). There are 2 buffers used by the
               compressor, one for input and one for output.  By default, DotNetZip
               allocates 4 buffer pairs per CPU core, so if your machine has 4
               cores, then the number of buffer pairs used will be 16. If you
               accept the default value of this property, 128k, then the
               ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory
               in total, or 4mb, in blocks of 128kb.  If you set this property to
               64kb, then the number will be 16 * 2 * 64kb of buffer memory, or
               2mb.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Returns the current position of the output stream.
            </summary>
            <remarks>
              <para>
                Because the output gets written by a background thread,
                the value may change asynchronously.  Setting this
                property always throws a NotSupportedException.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor(Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Inflate(Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Deflate(Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
    </members>
</doc>
